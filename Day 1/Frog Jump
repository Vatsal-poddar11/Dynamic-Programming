#include <bits/stdc++.h> 

// Recursion
int solve(int n, vector<int> &heights){
    if(n == 0){
        return 0;
    }
    if(n < 0){
        return INT_MAX;
    }
    
    int mini = INT_MAX;
    int op1 = solve(n-1,heights);
    if(op1 != INT_MAX){
        op1 = op1 + abs(heights[n] - heights[n-1]);
        mini = min(mini, op1);
    }
    int op2 = solve(n-2,heights);
    if(op2 != INT_MAX){
        op2 = op2 + abs(heights[n] - heights[n-2]);
        mini = min(op2, mini);
    }
 
    return mini;

}
// Memoization
int solveMem(int n, vector<int> &heights, vector<int>& dp){
    if(n == 0){
        return 0;
    }
    if(n < 0){
        return INT_MAX;
    }
    if(dp[n] != -1){
        return dp[n];
    }
    
    int mini = INT_MAX;
    int op1 = solveMem(n-1,heights,dp);
    if(op1 != INT_MAX){
        op1 = op1 + abs(heights[n] - heights[n-1]);
        mini = min(mini, op1);
    }
    int op2 = solveMem(n-2,heights,dp);
    if(op2 != INT_MAX){
        op2 = op2 + abs(heights[n] - heights[n-2]);
        mini = min(op2, mini);
    }
    dp[n] = mini;
    return mini;

}
// Tabulation
int solveTab(int N, vector<int>& heights){
    vector<int> dp(N+1, INT_MAX);
    dp[0] = 0;
    
    for(int n = 1; n <= N; n++){
        int mini = INT_MAX;
        int op1 = dp[n-1];
        if(op1 != INT_MAX){
            op1 = op1 + abs(heights[n] - heights[n-1]);
            mini = min(mini, op1);
        }
        if(n-2 >= 0){
            int op2 = dp[n-2];
            if (op2 != INT_MAX) {
                op2 = op2 + abs(heights[n] - heights[n - 2]);
                mini = min(op2, mini);
            }
        }
        dp[n] = mini;
    }
    return dp[N];
}
// Space Optimization
int solveSO(int N, vector<int>& heights){
    int prev1 = 0;
    int prev2 = 0;

    for(int n = 1; n <= N; n++){
        int mini = INT_MAX;
        int op1 = prev1 + abs(heights[n] - heights[n-1]);
        int op2 = INT_MAX;
        if(n-2 >= 0)
            op2 = prev2 + abs(heights[n] - heights[n-2]);

        mini = min(op1, op2);
        prev2 = prev1;
        prev1 = mini;
    }
    
    return prev1;
}

int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    // vector<int> dp(n+1, -1);
    return solveSO(n-1,heights);
}
