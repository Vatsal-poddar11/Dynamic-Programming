#include <bits/stdc++.h> 

long long int solve(vector<int>& arr, int i, vector<long long int>& dp){
    if(i >= arr.size()){
        return 0;
    }
    if(dp[i] != -1){
        return dp[i];
    }

    long long int include = solve(arr, i+2, dp) + arr[i];

    long long int exclude = solve(arr, i+1, dp);

    long long int ans = max(include, exclude);

    dp[i] = ans;
    return ans;
}

long long int solveTab(vector<int>& arr){
    vector<long long int> dp(arr.size()+2, 0);
    dp[arr.size()] = 0;

    for(int i = arr.size()-1; i >= 0; i--){
        long long int include = dp[i+2] + arr[i];
        long long int exclude = dp[i+1];

        long long int ans = max(include, exclude);

        dp[i] = ans;
    }
    return dp[0];
}

long long int solveSO(vector<int>& arr){
    long long int prev2 = 0;
    long long int prev1 = 0;
    long long int curr;

    for(int i = arr.size()-1; i >= 0; i--){
        long long int include = prev2 + arr[i];
        long long int exclude = prev1;

        long long int ans = max(include, exclude);

        curr = ans;
        prev2 = prev1;
        prev1 = curr;
    }
    return prev1;
}

long long int houseRobber(vector<int>& arr)
{
    int n = arr.size();
    if(n == 1){
        return arr[0];
    }

    // vector<long long int> dp(n, -1);
    vector<int> first, second;
    for(int i = 0; i < n; i++){
        if(i != n - 1){
            first.push_back(arr[i]);
        }
        if(i != 0){
            second.push_back(arr[i]);
        }
    }
    int index = 0;
    long long int ans1 = solveSO(first);

    // for(int i = 0; i < n; i++){
    //     dp[i] = -1;
    // }

    long long int ans2 = solveSO(second);
    
    return max(ans1, ans2);
}
