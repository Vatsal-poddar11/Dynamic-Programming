#include <bits/stdc++.h> 

int solve(vector<vector<int>> &matrix, int n, int m, int i, int j, vector<vector<int>>& dp){
    if(j < 0 || j == m){
        return -1e8;
    }
    if(i == n-1){
        return matrix[i][j];
    }
    if(dp[i][j] != -1){
        return dp[i][j];
    }

    int down = matrix[i][j] + solve(matrix,n,m,i+1,j,dp);
    int downLeft = matrix[i][j] + solve(matrix,n,m,i+1,j-1,dp);
    int downRight = matrix[i][j] + solve(matrix,n,m,i+1,j+1,dp);

    return dp[i][j] = max(down, max(downLeft, downRight)); 
}

int solveTab(vector<vector<int>> &matrix, int n, int m){                       // Constraint check
    vector<vector<int>> dp(n, vector<int>(m, 0));
    for(int j = 0; j < m; j++){
        dp[n-1][j] = matrix[n-1][j];
    }

    for(int i = n-2; i >= 0; i--){
        for(int j = m-1; j >= 0; j--){
            int down = matrix[i][j] + dp[i+1][j];
            int downLeft = matrix[i][j]; 
            if(j-1 >= 0){
                downLeft = downLeft + dp[i+1][j-1];
            }
            else{
                downLeft += -1e8;
            }
            int downRight = matrix[i][j];
            if(j+1 < m){
                downRight = downRight + dp[i+1][j+1];
            }
            else{
                downRight += -1e8;
            }
            dp[i][j] = max(down, max(downLeft, downRight)); 
        }
    }
    
    int maxi = -1e8;
    for(int j = 0; j < m; j++){
        maxi = max(maxi, dp[0][j]);
    }

    return maxi;
}

int getMaxPathSum(vector<vector<int>> &matrix)
{
    //  Write your code here.
    int n = matrix.size();
    int m = matrix[0].size();
    vector<vector<int>> dp(n, vector<int>(m, -1));

    int maxi = -1e8;
    for (int j = 0; j < m; j++) {
        int ans = solveTab(matrix, n, m);
        maxi = max(maxi, ans);
    }
    return maxi;
}
